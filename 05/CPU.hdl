// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // The value going into register A is either the given instruction value, or the output from the ALU.
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);

    // We only load a value into the A register if instruction[15] is 1 or instruction[5] is 1.
    Not(in=instruction[15], out=notI);
    Or(a=notI, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM); // A-Register

    // The value going to the ALU is either the value in A or M, depending on instruction[12].
    Mux16(a=outA, b=inM, sel=instruction[12], out=toALU);

    // ALU Logic
    // Default to 001100 if instruction[15] is 0. This means the ALU just returns its x input value.
    Mux(a=false, b=instruction[11], sel=instruction[15], out=cSix);
    Mux(a=false, b=instruction[10], sel=instruction[15], out=cFive);
    Mux(a=true, b=instruction[9], sel=instruction[15], out=cFour);
    Mux(a=true, b=instruction[8], sel=instruction[15], out=cThree);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=cTwo);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=cOne);

    ALU(x=outD, y=toALU, zx=cSix, nx=cFive, zy=cFour, ny=cThree, f=cTwo, no=cOne, out=outALU, out=outM, zr=zr, ng=ng);

    // Only load the ALU's output to the D register if instruction[4] is 1.
    DRegister(in=outALU, load=instruction[4], out=outD); // D-Register


    // Jump Logic
    And(a=zr, b=instruction[1], out=zeroJump);
    And(a=ng, b=instruction[2], out=negativeJump);
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    And(a=notZr, b=notNg, out=positiveOutput);
    And(a=positiveOutput, b=instruction[0], out=positiveJump);
    Or(a=negativeJump, b=positiveJump, out=nonzeroJump);
    Or(a=nonzeroJump, b=zeroJump, out=jumpLogic);

    And(a=instruction[15], b=jumpLogic, out=jump);

    Not(in=jump, out=inc);

    PC(in=outA, reset=reset, load=jump, inc=inc, out[0..14]=pc);

    // writeM output
    Or(a=false, b=instruction[3], out=writeMLogic);
    And(a=writeMLogic, b=instruction[15], out=writeM);
}